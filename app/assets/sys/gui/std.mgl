// Color definition with RGBA channels.
Color {
    r: Int // Red channel, 0-255
    g: Int // Green channel, 0-255
    b: Int // Blue channel, 0-255
    a: Int // Alpha channel, 0-255 for transparency
}

// Border styling for elements.
Border {
    color: Color // Border color
    width: Int // Border width in pixels
    style: String // Border style (e.g., "solid", "dashed")
    radius: Int // Corner radius for rounded borders
}

// Image component with source URL and alternative text.
Image {
    source: String // URL of the image
    alt: String // Alternative text for accessibility
    width: Int // Width of the image (optional)
    height: Int // Height of the image (optional)
}

// Text element with content and styling.
Text {
    fontSize: Int // Font size in pixels
    fontColor: Color // Text color
    textAlign: String // Horizontal alignment ("left", "center", "right")
    verticalAlign: String // Vertical alignment ("top", "middle", "bottom")
    content: String // Text content. Because it's the last property, it can be inferred without explicit declaration.
}

Position {
    top: Int // Top position in pixels
    left: Int // Left position in pixels
    right: Int // Right position in pixels
    bottom: Int // Bottom position in pixels
    typeNode : String // Position typeNode (e.g., "absolute", "relative")
}

// Styling properties for visual appearance.
Style {
    background: Color | Image // Background color or image
    border: Border // Border styling
    margin: Int // Outer spacing in pixels
    padding: Int // Inner spacing in pixels
    width: Int // Width in pixels (optional)
    height: Int // Height in pixels (optional)
    position: Position // Positioning properties
}


// Event hooks for interactive behavior. Functions are lua functions.
Hooks {
    onClick: Function // Function to call on click events
    onHover: Function // Function to call on hover events
    onFocus: Function // Function to call on focus events
    onBlur: Function // Function to call on blur events
}


// Base element with common properties and styling.
Element : Style {
    class: String // CSS-like class for applying styles. Do we really need this if we're using a style object?
    id: String // Unique identifier
    hooks: Hooks // Event hooks
    children: Element[] | String[] // Child elements. The last element can be inferred without explicit declaration.
}


// Button element for user interactions.
Button : Element {
    label: Text | Element // Button label or custom content
    enabled: Bool // Whether the button is interactive
}

// Input element for text entry.
Input : Element {
    value: String // Current input value
    placeholder: String // Placeholder text
    typeNode: String // Input typeNode (e.g., "text", "password")
    required: Bool // Whether input is required for form submission
    bisabled: Bool // Whether the input is disabled
}


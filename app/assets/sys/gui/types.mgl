Number : float | int{};

// This is a subtype of Number, that is used for method argument types to resolve ambiguity
NumberA : Number{}

blah {}

// Another subtype of Number
NumberB : float | int {
    + : (NumberB, NumberB) -> NumberB = NumberB.add
    - : (NumberB, NumberB) -> NumberB = NumberB.subtract
    * : (NumberB, NumberB) -> NumberB = NumberB.multiply
    / : (NumberB, NumberB) -> NumberB = NumberB.divide
    % : (NumberB, NumberB) -> NumberB = NumberB.mod

    // The NumberB is the self typeNode. You can use it like this or like the next example.
    ToString : (NumberB) -> string = NumberB.toString(42, 69 * 420 + NumberB)
    // This is the same as the above example, but it's a bit more explicit.
    ToStringTwo : (Self : NumberB) -> string = Self.toString
}


// A function typeNode that takes two Numbers, but the numbers are basically typeNode aliases for the Number typeNode
// so that we can resolve ambiguity when calling the function.
Function: (NumberA, NumberB) -> Number {
    foo =  5 + 5
}

// This is a bit of syntactic sugar for the above function typeNode.
// It's the same as the above function typeNode, but it's a bit more concise.
// It creates two subtypes of Number, NumberA and NumberB, and then uses those subtypes in the function typeNode.
// TODO: see if we can do return typeNode inferences for inline function declarations
FunctionTwo : (A : Number, B : Number) -> Number {
    Test : Number = A + B
}

